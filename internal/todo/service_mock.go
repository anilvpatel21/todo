// Code generated by MockGen. DO NOT EDIT.
// Source: internal/todo/service.go

// Package todo is a generated GoMock package.
package todo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoService is a mock of TodoService interface.
type MockTodoService struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceMockRecorder
}

// MockTodoServiceMockRecorder is the mock recorder for MockTodoService.
type MockTodoServiceMockRecorder struct {
	mock *MockTodoService
}

// NewMockTodoService creates a new mock instance.
func NewMockTodoService(ctrl *gomock.Controller) *MockTodoService {
	mock := &MockTodoService{ctrl: ctrl}
	mock.recorder = &MockTodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoService) EXPECT() *MockTodoServiceMockRecorder {
	return m.recorder
}

// AddAttachment mocks base method.
func (m *MockTodoService) AddAttachment(todoID, userID, fileName, fileType, filePath string) (*Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttachment", todoID, userID, fileName, fileType, filePath)
	ret0, _ := ret[0].(*Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttachment indicates an expected call of AddAttachment.
func (mr *MockTodoServiceMockRecorder) AddAttachment(todoID, userID, fileName, fileType, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttachment", reflect.TypeOf((*MockTodoService)(nil).AddAttachment), todoID, userID, fileName, fileType, filePath)
}

// CreateTodo mocks base method.
func (m *MockTodoService) CreateTodo(userID, title, description string) (*Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", userID, title, description)
	ret0, _ := ret[0].(*Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoServiceMockRecorder) CreateTodo(userID, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoService)(nil).CreateTodo), userID, title, description)
}

// DeleteAttachment mocks base method.
func (m *MockTodoService) DeleteAttachment(todoID, userID, attachmentID string) (*Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", todoID, userID, attachmentID)
	ret0, _ := ret[0].(*Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockTodoServiceMockRecorder) DeleteAttachment(todoID, userID, attachmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockTodoService)(nil).DeleteAttachment), todoID, userID, attachmentID)
}

// DeleteTodo mocks base method.
func (m *MockTodoService) DeleteTodo(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServiceMockRecorder) DeleteTodo(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoService)(nil).DeleteTodo), id, userID)
}

// GetTodosByID mocks base method.
func (m *MockTodoService) GetTodosByID(id, userID string) (*Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosByID", id, userID)
	ret0, _ := ret[0].(*Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosByID indicates an expected call of GetTodosByID.
func (mr *MockTodoServiceMockRecorder) GetTodosByID(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosByID", reflect.TypeOf((*MockTodoService)(nil).GetTodosByID), id, userID)
}

// GetTodosByUserID mocks base method.
func (m *MockTodoService) GetTodosByUserID(userID string) ([]Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosByUserID", userID)
	ret0, _ := ret[0].([]Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosByUserID indicates an expected call of GetTodosByUserID.
func (mr *MockTodoServiceMockRecorder) GetTodosByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosByUserID", reflect.TypeOf((*MockTodoService)(nil).GetTodosByUserID), userID)
}

// UpdateTodo mocks base method.
func (m *MockTodoService) UpdateTodo(id, userID, title, description string) (*Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, userID, title, description)
	ret0, _ := ret[0].(*Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoServiceMockRecorder) UpdateTodo(id, userID, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoService)(nil).UpdateTodo), id, userID, title, description)
}
